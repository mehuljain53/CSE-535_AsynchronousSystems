1. Consider Basic Paxos as described using itemized steps by Lamport in his "Paxos made simple" paper.

(1) What liveness problems does the algorithm have? 
Consider a scenario in which two proposers each keep issuing a sequence of proposals with increasing numbers, none of which are ever chosen. Proposer p completes phase 1 for a proposal number n1. Another proposer q then completes phase 1 for a proposal number n2 > n1. Proposer p’s phase 2 accept requests for a proposal numbered n1 are ignored because the acceptors have all promised not to accept any new proposal numbered less than n2. So, proposer p then begins and completes phase 1 for a new proposal number n3 > n2, causing the second phase 2 accept requests of proposer q to be ignored. And so on.

(2) What are possible methods for solving them?
	- a distinguished proposer must be selected as the only one to try issuing proposals. If the distinguished proposer can communicate successfully with a majority of acceptors, and if it uses a proposal with number greater than any already used, then it will succeed in issuing a proposal that is accepted. By abandoning a proposal and trying again if it learns about some request with a higher proposal number, the distinguished proposer will eventually choose a high enough proposal number.
	- Also, a reliable algorithm for electing a proposer must use either randomness or real time—for example, by using timeouts.
	However, safety is ensured regardless of the success or failure of the election.


2. Consider Multi-Paxos as described in pseudocode by van Renesse in his "Paxos made moderately complex" paper.

(1) What performance problems does the algorithm have? 
	-Acceptor maintains unnecessary pvalues in its accepted set.
	-Replicas store information about its request which is no longer required (i.e Decision is made for that Slot number).
	-When all replicas have learned that some slot has been decided, then it is no longer necessary for an acceptor to maintain the corresponding pvalues in its accepted set.
	-No Optimal Recovery strategy
	-On Preemtion, Leader will again send the next 1a message quickly with higher ballot number. This may lead to liveness issue as described in the above question


(2) What are possible methods for solving them?
	- When all replicas have learned that some slot has been decided, then it is no longer necessary for an acceptor to maintain the corresponding pvalues in its accepted set. To enable garbage collection, replicas could respond to leaders when they have performed a command, and upon a leader learning that all replicas have done so it could notify the acceptors to release the corresponding state.
	- Leader should keep a track of slots that has been decided. For P1a request, leader should include the first available slot for which there is no decision. In case of failure recovery, leader do not have to start commanders for slots that have decisions and maintaining proposals for these slots is not required.
	- Requests maintained by Replicas should contain only those requests for slot numbers higher than slot_num
	- acceptors only maintain the most recently accepted pvalue for each slot and return only these pvalues in a p1b message to the scout.
	- Associate timeout with each ballot for a leader. When ballot gets preempted, next ballot should use timeout that is some function of ballot number.
	- Keep state of acceptors and leaders on disk so that on crash, they can recover from disk.



Credits:  "Paxos made simple" paper. "Paxos made moderately complex" paper.
Reference for the above questions has been taken from the above 2 mentioned papers