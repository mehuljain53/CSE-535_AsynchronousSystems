import sys
import time
config(channel is fifo, clock is lamport)
import json
from itertools import chain
import random
from monitor import WinResourceUsageData
from monitor import PosixResourceUsageData
from monitor import Monitor


if sys.platform == "win32":
    ResourceUsageData = WinResourceUsageData
else:
    import resource
    ResourceUsageData = PosixResourceUsageData


class origProcess(process):
    def setup(s:set, nrequests:int,monitor:Monitor):  # s is set of all other processes
        self.q = set()
        self.rudata = ResourceUsageData()

    def mutex(task):
        -- request
        c = logical_clock()
        send(('request', c, self), to= s)
        q.add(('request', c, self))
        if(await(each(('request', c2, p) in q,
                   has= (c2, p)==(c, self) or (c, self) < (c2, p)) and
              each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c)))):

            -- critical_section
            send(('execCS', logical_clock(), self), to= monitor)
            task()
            send(('finishCS', logical_clock(), self), to= monitor)
            -- release
            q.remove(('request', c, self))
            send(('release', logical_clock(), self), to= s)
        elif(timeout(0.5)):
            #output('Deadlock Found')
            send(('Deadlock'),to=monitor)

    def receive(msg= ('request', c2, p)):
        q.add(('request', c2, p))
        send(('ack', logical_clock(), self), to= p)

    def receive(msg= ('release', _, p)):
#        q.remove(('request', _, p))  # pattern matching needed for _
#        q.remove(anyof(setof(('request', c, p), ('request', c, _p) in q)))
        for x in setof(('request', c, p), ('request', c, _p) in q):
            q.remove(x)
            break
#        for ('request', c, _p) in q: q.remove('request', c, p); break
#        for (tag, c, p2) in q:
#            if tag == 'request' and p2 == p:
#                q.remove((tag, c, p2)); break

    def run():
        def task():
            #output('in cs')
            time.sleep(0.05)
        self.rudata.start()
        for i in range(nrequests):
            mutex(task)

        send(('done', self), to= parent())
        await(received(('done',), from_=parent()))
        self.rudata.end()
        send(('finishExecution',rudata), to=monitor)
        #output('terminating')



# This is an executable specification of the algorithm described in
# Lamport, L. (1978). "Time, clocks, and the ordering of events in a
# distributed system".  Communications of the ACM, 21(7):558-565.

# This code includes setup and termination for serving a given number of
# requests per process.

# All labels are not needed,
# leaving 14 or 15 lines total for the algorithm body and message handlers.
