import sys
import os
import time
config(channel is fifo, clock is lamport)
import json
from itertools import chain
import random
from monitor import WinResourceUsageData
from monitor import PosixResourceUsageData
from monitor import Monitor


if sys.platform == "win32":
    ResourceUsageData = WinResourceUsageData
else:
    import resource
    ResourceUsageData = PosixResourceUsageData

class LamportPeformance(process):
    def setup(s:set, nrequests:int,id:int,monitor:Monitor):  # s is set of all other processes
        self.q = set()
        self.rudata = ResourceUsageData()

    def request():
        -- request
        c = logical_clock()
        #print("Requesting %d" % (id))
        send(('request', c, self), to= s)
        q.add(('request', c, self))


    def executeCriticalSection():
        -- Execute
        min = logical_clock()
        p=self
        for (x, c, p) in q:
            if p == self and c<min:
                min = c

        c = min
        if(await(each(('request', c2, p) in q,
                   has= (c2, p)==(c, self) or (c, self) < (c2, p)) and
              each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c)))):
            -- critical_section
            #send(('execCS', logical_clock(), self), to= monitor)
            task()
            #send(('finishCS', logical_clock(), self), to= monitor)
            release(c)
        elif(timeout(0.5)):
            #output('Deadlock Found')
            #send(('Deadlock'),to=monitor)
            pass

    def release(c:int):
        #print("Removing %d %d" % (id,c))
        -- release
        q.remove(('request', c, self))
        send(('release', logical_clock(), self), to= s)


    def receive(msg= ('request', c2, p)):
        q.add(('request', c2, p))
        send(('ack', logical_clock(), self), to= p)

    def receive(msg= ('release',_, p)):
        for x in q:
            if p == x[2]:
                #print("Removing %d %d" % (id,x[1]))
                q.remove(x)
                break

    def task():
        #print("In CriticalSection %d" % (id))
        time.sleep(0.05)
        #print("Out CriticalSection %d" % (id))

    def run():
        self.rudata.start()
        for i in range(nrequests):
            request()

        for i in range(nrequests):    
            executeCriticalSection()
            

        send(('done', self), to= parent())
        await(received(('done',), from_=parent()))
        self.rudata.end()
        #rudataResult = getattr(self.rudata, 'results')
        send(('finishExecution',rudata), to=monitor)
        #output('terminating')