import sys
import time
config(channel is fifo, clock is lamport)
import json
from itertools import chain
import random
from monitor import WinResourceUsageData
from monitor import PosixResourceUsageData
from monitor import Monitor


if sys.platform == "win32":
    ResourceUsageData = WinResourceUsageData
else:
    import resource
    ResourceUsageData = PosixResourceUsageData

class specProcess(process):
    def setup(s:set, nrequests:int,monitor:Monitor):  # s is set of all other processes
        self.q = set()
        self.rudata = ResourceUsageData()

    def mutex(task):
        -- request
        c = logical_clock()
        send(('request', c, self), to= s)
        if(await(each(received(('request', c2, p)),
                   has= received(('release', c2, p)) or (c, self) < (c2, p))
              and each(p in s, has= received(('ack', c, p))))):
            -- critical_section
            send(('execCS', logical_clock(), self), to= monitor)
            task()
            send(('finishCS', logical_clock(), self), to= monitor)
            -- release
            send(('release', c, self), to= s)
        elif(timeout(0.5)):
            #output('Deadlock Found')
            send(('Deadlock'),to=monitor)

    def receive(msg= ('request', c, p)):
        send(('ack', c, self), to= p)

    def run():
        def task():
            #output('in cs')
            time.sleep(0.05)
            #output('releasing cs')

        self.rudata.start()
        for i in range(nrequests):
            mutex(task)

        send(('done', self), to= s)
        await(each(p in s, has= received(('done', p))))
        #output('terminating')
        self.rudata.end()
        send(('finishExecution',rudata), to=monitor)


# This is an executable specification that simplifies the algorithm in
# Lamport, L. (1978). "Time, clocks, and the ordering of events in a
# distributed system".  Communications of the ACM, 21(7):558-565.

# The simplification is to remove an unnecessary q and message handler;
# release and ack messages include the request time,
# not timestamps unused or used for unnecessary expensive comparison.

# This code includes setup and termination for serving a given number of
# requests per process.

# All labels are not needed,
# leaving a total of 9 lines for the algorithm body and message handler.
