import sys
import os
import time
config(channel is fifo, clock is lamport)
import json
from itertools import chain
import random
from monitor import WinResourceUsageData
from monitor import PosixResourceUsageData
from monitor import Monitor
from Lamport import lamport
from orig import origProcess
from spec import specProcess

if sys.platform == "win32":
    ResourceUsageData = WinResourceUsageData
else:
    import resource
    ResourceUsageData = PosixResourceUsageData


def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 1
    n = int(sys.argv[3]) if len(sys.argv) > 3 else 1
    d = int(sys.argv[4]) if len(sys.argv) > 4 else 1
    a = int(sys.argv[5]) if len(sys.argv) > 5 else 1





    ############################## My version of Lamport running n times with nprocs process and nrequests request
    print("*************************** Running Correctness for Lamport Clock as mentioned in Assignement ***************************")
    for i in range(n):
        totalProcess = random.randint(1,nprocs)
        totalRequest = random.randint(1,nrequests)
        print("---------- Result for Iteration: %d: %d Process and %d Requests ----------" %(i+1,totalProcess,totalRequest))
        ps = new(lamport, num=totalProcess)
        monitor = new(Monitor,num=1)
        setup(monitor,(True,totalProcess))
        count=0
        for p in ps: 
            setup(p, (ps-{p}, totalRequest,count,monitor))
            count+=1
        start(monitor)
        start(ps)
        await(each(p in ps, has=received(('done', p))))
        send(('done',), to=ps)
        await(each(p in monitor, has=received(('done', p))))


    print("*************************** Running Performance for Lamport Clock as mentioned in Assignement ***************************")
    
    processRequest = int(nrequests/d)

    for requestFactor in range(d):
        totalProcess = nprocs
        totalRequest = processRequest*(requestFactor+1)
        print("################## Result for %d Process and %d Requests ##################" %(totalProcess,totalRequest))
        for repeatTask in range(a):
            print("---------- Result for Iteration: %d ----------" %(repeatTask+1))
            ps = new(lamport, num=totalProcess)
            monitor = new(Monitor,num=1)
            setup(monitor,(True,totalProcess))
            count=0
            for p in ps: 
                setup(p, (ps-{p}, totalRequest,count,monitor))
                count+=1
            start(monitor)
            start(ps)
            await(each(p in ps, has=received(('done', p))))
            send(('done',), to=ps)
            await(each(p in monitor, has=received(('done', p))))


    processNumber = int(nprocs/d)

    for processNumberFactor in range(d):
        totalProcess = processNumber*(processNumberFactor+1)
        totalRequest = nrequests
        print("################## Result for %d Process and %d Requests ##################" %(totalProcess,totalRequest))
        for repeatTask in range(a):
            print("---------- Result for Iteration: %d ----------" %(repeatTask+1))
            ps = new(lamport, num=totalProcess)
            monitor = new(Monitor,num=1)
            setup(monitor,(True,totalProcess))
            count=0
            for p in ps: 
                setup(p, (ps-{p}, totalRequest,count,monitor))
                count+=1
            start(monitor)
            start(ps)
            await(each(p in ps, has=received(('done', p))))
            send(('done',), to=ps)
            await(each(p in monitor, has=received(('done', p))))




    ############################ For Orig.da version of Algo
    print("*************************** Running Correctness for Orig File Clock as mentioned in Assignement ***************************")
    for i in range(n):
        totalProcess = random.randint(1,nprocs)
        totalRequest = random.randint(1,nrequests)
        print("---------- Result for Iteration: %d: %d Process and %d Requests ----------" %(i+1,totalProcess,totalRequest))
        ps = new(origProcess, num=totalProcess)
        monitor = new(Monitor,num=1)
        setup(monitor,(True,totalProcess))
        
        for p in ps: 
            setup(p, (ps-{p}, totalRequest,monitor))
            
        start(monitor)
        start(ps)
        await(each(p in ps, has=received(('done', p))))
        send(('done',), to=ps)
        await(each(p in monitor, has=received(('done', p))))


    print("*************************** Running Performance for Orig File Clock as mentioned in Assignement ***************************")
    
    processRequest = int(nrequests/d)

    for requestFactor in range(d):
        totalProcess = nprocs
        totalRequest = processRequest*(requestFactor+1)
        print("################## Result for %d Process and %d Requests ##################" %(totalProcess,totalRequest))
        for repeatTask in range(a):
            print("---------- Result for Iteration: %d ----------" %(repeatTask+1))
            ps = new(origProcess, num=totalProcess)
            monitor = new(Monitor,num=1)
            setup(monitor,(True,totalProcess))
            for p in ps: 
                setup(p, (ps-{p}, totalRequest,monitor))

            start(monitor)
            start(ps)
            await(each(p in ps, has=received(('done', p))))
            send(('done',), to=ps)
            await(each(p in monitor, has=received(('done', p))))


    processNumber = int(nprocs/d)

    for processNumberFactor in range(d):
        totalProcess = processNumber*(processNumberFactor+1)
        totalRequest = nrequests
        print("################## Result for %d Process and %d Requests ##################" %(totalProcess,totalRequest))
        for repeatTask in range(a):
            print("---------- Result for Iteration: %d ----------" %(repeatTask+1))
            ps = new(origProcess, num=totalProcess)
            monitor = new(Monitor,num=1)
            setup(monitor,(True,totalProcess))
            
            for p in ps: 
                setup(p, (ps-{p}, totalRequest,monitor))
                
            start(monitor)
            start(ps)
            await(each(p in ps, has=received(('done', p))))
            send(('done',), to=ps)
            await(each(p in monitor, has=received(('done', p))))







############################ For spec.da version of Algo
    print("*************************** Running Correctness for Spec Clock as mentioned in Assignement ***************************")
    for i in range(n):
        totalProcess = random.randint(1,nprocs)
        totalRequest = random.randint(1,nrequests)
        print("---------- Result for Iteration: %d: %d Process and %d Requests ----------" %(i+1,totalProcess,totalRequest))
        ps = new(specProcess, num=totalProcess)
        monitor = new(Monitor,num=1)
        setup(monitor,(True,totalProcess))
        
        for p in ps: 
            setup(p, (ps-{p}, totalRequest,monitor))
            
        start(monitor)
        start(ps)
        await(each(p in monitor, has=received(('done', p))))


    print("*************************** Running Performance for Spec Clock as mentioned in Assignement ***************************")
    
    processRequest = int(nrequests/d)

    for requestFactor in range(d):
        totalProcess = nprocs
        totalRequest = processRequest*(requestFactor+1)
        print("################## Result for %d Process and %d Requests ##################" %(totalProcess,totalRequest))
        for repeatTask in range(a):
            print("---------- Result for Iteration: %d ----------" %(repeatTask+1))
            ps = new(specProcess, num=totalProcess)
            monitor = new(Monitor,num=1)
            setup(monitor,(True,totalProcess))
            for p in ps: 
                setup(p, (ps-{p}, totalRequest,monitor))

            start(monitor)
            start(ps)
            await(each(p in monitor, has=received(('done', p))))


    processNumber = int(nprocs/d)

    for processNumberFactor in range(d):
        totalProcess = processNumber*(processNumberFactor+1)
        totalRequest = nrequests
        print("################## Result for %d Process and %d Requests ##################" %(totalProcess,totalRequest))
        for repeatTask in range(a):
            print("---------- Result for Iteration: %d ----------" %(repeatTask+1))
            ps = new(specProcess, num=totalProcess)
            monitor = new(Monitor,num=1)
            setup(monitor,(True,totalProcess))
            
            for p in ps: 
                setup(p, (ps-{p}, totalRequest,monitor))
                
            start(monitor)
            start(ps)
            await(each(p in monitor, has=received(('done', p))))







    #cmd_orig = 'python -m da  orig.da %s %s'%(3,2)
    #os.system(cmd_orig)



    

# This is an executable specification of the algorithm described in
# Lamport, L. (1978). "Time, clocks, and the ordering of events in a
# distributed system".  Communications of the ACM, 21(7):558-565.

# This code includes setup and termination for serving a given number of
# requests per process.


